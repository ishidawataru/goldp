// Copyright (C) 2016 Nippon Telegraph and Telephone Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
// implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package goldpapi;

service GoldpApi {
    rpc StartServer(StartServerRequest) returns (StartServerResponse) {}
    rpc StopServer(StopServerRequest) returns (StopServerResponse) {}
    rpc GetServer(GetServerRequest) returns (GetServerResponse) {}
    rpc AddInterface(AddInterfaceRequest) returns (AddInterfaceResponse) {}
    rpc DeleteInterface(DeleteInterfaceRequest) returns (DeleteInterfaceResponse) {}
    rpc ListInterface(ListInterfaceRequest) returns (ListInterfaceResponse) {}
    rpc ListSession(ListSessionRequest) returns (ListSessionResponse) {}
    rpc AddInterfaceAddress(AddInterfaceAddressRequest) returns (AddInterfaceAddressResponse) {}
    rpc DeleteInterfaceAddress(DeleteInterfaceAddressRequest) returns (DeleteInterfaceAddressResponse) {}
    rpc AddLocalLabelMapping(AddLocalLabelMappingRequest) returns (AddLocalLabelMappingResponse) {}
    rpc DeleteLocalLabelMapping(DeleteLocalLabelMappingRequest) returns (DeleteLocalLabelMappingResponse) {}
    rpc GetLabelMapping(GetLabelMappingRequest) returns (GetLabelMappingResponse) {}
    rpc ListLabelMapping(ListLabelMappingRequest) returns (ListLabelMappingResponse) {}
    rpc MonitorSession(MonitorSessionRequest) returns (stream MonitorSessionResponse) {}
}

message StartServerRequest  {
    Server server = 1;
}

message StartServerResponse {
    Server server = 1;
}

message StopServerRequest  {
}

message StopServerResponse {
    Server server = 1;
}

message GetServerRequest  {
}

message GetServerResponse {
    Server server = 1;
}

message AddInterfaceRequest  {
    Interface interface = 1;
}

message AddInterfaceResponse {
    Interface interface = 1;
}

message DeleteInterfaceRequest  {
    Interface interface = 1;
}

message DeleteInterfaceResponse {
    Interface interface = 1;
}

message ListInterfaceRequest  {
}

message ListInterfaceResponse {
    repeated Interface interfaces = 1;
}

message ListSessionRequest {
}

message ListSessionResponse {
    repeated Session sessions = 1;
}

message AddInterfaceAddressRequest {
    Interface interface = 1;
}

message AddInterfaceAddressResponse {
}

message DeleteInterfaceAddressRequest {
    Interface interface = 1;
}

message DeleteInterfaceAddressResponse {
}

message AddLocalLabelMappingRequest {
    repeated string FEC = 1;
    uint32 label = 2;
}

message AddLocalLabelMappingResponse {
}

message DeleteLocalLabelMappingRequest {
    repeated string FEC = 1;
}

message DeleteLocalLabelMappingResponse {
}

message GetLabelMappingRequest {
    string prefix = 1;
}

message GetLabelMappingResponse {
    Mapping mapping = 1;
}

message ListLabelMappingRequest {
}

message ListLabelMappingResponse {
    repeated Mapping mapping = 1;
}

message MonitorSessionRequest {
}

message MonitorSessionResponse {
    enum Type {
        ADD = 0;
        DEL = 1;
        UPDATE = 2;
    }
    Type type = 1;
    Session session = 2;
}


enum LabelAdvMode {
    DOD = 0;
    DU = 1;
}

message Server {
    string router_id = 1;
    uint32 hold_time = 2;
    string local_address = 3;
    uint32 hello_interval = 4;
    uint32 keep_alive_time = 5;
    uint32 max_pdu_length = 6;
    bool loop_detection = 7;
    uint32 path_vector_limit = 8;
    LabelAdvMode label_adv_mode = 9;
}

message Interface {
    string name = 1;
    repeated string addresses = 2;
}

message Session {
    string local_id = 1;
    string peer_id = 2;
    uint32 keep_alive_time = 3;
    uint32 max_pdu_length = 4;
    bool loop_detection = 5;
    uint32 path_vector_limit = 6;
    LabelAdvMode label_adv_mode = 7;
    string prev_fsm_state = 8;
    string fsm_state = 9;
}

message Mapping {
    string prefix = 1;
    uint32 local = 2;
    map<string, uint32> remote = 3;
}
